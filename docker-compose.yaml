services:

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - TZ=${TZ}
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./utils:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - local_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  airflow-init:
    image: apache/airflow:2.7.1
    container_name: airflow-init
    env_file: .env
    entrypoint: ["/opt/airflow/bootstrap/wait_for_postgres.sh", "postgres", "bash", "/opt/airflow/bootstrap/init_connections.sh"]
    volumes:
    - ./airflow/bootstrap:/opt/airflow/bootstrap
    networks:
    - local_net
    depends_on:
      - postgres
      
  airflow-webserver:
    image: apache/airflow:2.7.1
    build:
      context: ./airflow
    container_name: airflow-webserver
    restart: unless-stopped
    env_file: .env
    command: webserver
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__DEFAULT_TIMEZONE=${TZ}
      - TZ=${TZ}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${dag_paused_upon_creation}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    networks:
      - local_net
    depends_on:
      - postgres
      - airflow-init

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow-scheduler
    restart: unless-stopped
    env_file: .env
    command: scheduler
    environment:
      - AIRFLOW__CORE__DEFAULT_TIMEZONE=${TZ}
      - TZ=${TZ}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=${dag_paused_upon_creation}      
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    networks:
      - local_net
    depends_on:
      - postgres
      - airflow-init

  airflow-log-cleaner:
    image: alpine:latest
    container_name: airflow-log-cleaner
    volumes:
      - ${PWD}/airflow/logs:/opt/airflow/logs
    command: >
      sh -c "apk add --no-cache coreutils findutils bash && 
             while true; do
               echo 'Cleaning old logs at' $(date);
               find /opt/airflow/logs -type f -mmin +10 -print -delete;
               find /opt/airflow/logs -type d -empty -delete;
               sleep 60;
             done"
    restart: unless-stopped
    networks:
      - local_net

#  metabase:
#    image: metabase/metabase:v0.56.7
#    container_name: metabase
#    environment:
#      - TZ=${TZ}    
#    restart: always
#    env_file: .env
##    volumes:
##      - ./metabase_data:/metabase-data #we are using Postgres for Metabase storage,Dashboards,saved questions,Users,permissions w config
#    ports:
#      - "3003:3000"
#    depends_on:
#      postgres:
#        condition: service_healthy
#    networks:
#      - local_net

  schemaspy:
    image: schemaspy/schemaspy:7.0.2
    container_name: schemaspy
    env_file: .env
    depends_on:
      - postgres
    networks:
      - local_net
    volumes:
      - ./schemas_generate/output:/output
      - ./schemas_generate/driver:/driver
      - ./schemas_generate/bootstrap:/bootstrap
    entrypoint: ["/bootstrap/init_drivers.sh"]

volumes:
  postgres_data:

networks:
  local_net:
    name: local_net
    driver: bridge    